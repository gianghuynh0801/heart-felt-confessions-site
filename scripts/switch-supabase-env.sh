
#!/bin/bash

# Temporary directory and migration file paths
TEMP_DIR="./temp_schema"
MIGRATION_FILE="./migration_backup.sql"

# Function to get schema information as parameters
get_schema_info() {
    PROJECT_NAME=$1
    SCHEMA_NAME=$2
    DB_USER=$3
    PROD_URL=$4
    PROD_KEY=$5
    LOCAL_URL=${6:-"http://localhost:54321"}
    LOCAL_KEY=${7:-"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJyb2xlIjoiYW5vbiIsImlhdCI6MTYyMjYxNDgyMiwiZXhwIjoxOTM4MTkwODIyfQ.ZDj4ZPXzyQy6LA7WL5RqWzF1NEg-QmP5ABHrGa_LBQI"}
    
    # Create temp directory if it doesn't exist
    mkdir -p $TEMP_DIR
    
    # Set schema file path
    SCHEMA_FILE="$TEMP_DIR/${PROJECT_NAME}_schema.sql"
    
    echo "Processing schema migration for:"
    echo "- Project: $PROJECT_NAME"
    echo "- Schema: $SCHEMA_NAME"
    echo "- User: $DB_USER"
}

# Function to update client.ts
update_client_file() {
    local env=$1
    local target_file="src/integrations/supabase/client.ts"
    
    if [ "$env" = "local" ]; then
        url=$LOCAL_URL
        key=$LOCAL_KEY
        echo "Switching to Local Supabase environment..."
    else
        url=$PROD_URL
        key=$PROD_KEY
        echo "Switching to Production Supabase environment..."
    fi
    
    cat > "$target_file" << EOF
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "${url}";
const SUPABASE_PUBLISHABLE_KEY = "${key}";
const SCHEMA = "${SCHEMA_NAME}";

export const supabase = createClient<Database>(
    SUPABASE_URL, 
    SUPABASE_PUBLISHABLE_KEY,
    {
        db: {
            schema: SCHEMA
        }
    }
);
EOF

    echo "Updated $target_file with schema $SCHEMA_NAME"
}

# Check for Supabase CLI
check_supabase_cli() {
    if ! command -v supabase &> /dev/null; then
        echo "Error: Supabase CLI not found"
        echo "Install with: npm install -g supabase"
        exit 1
    fi
}

# Backup schema from production
backup_schema() {
    echo "Backing up schema $SCHEMA_NAME from Supabase production..."
    
    # Backup current schema
    supabase db dump \
        --db-url "postgresql://postgres:postgres@$PROD_URL:5432/postgres" \
        --schema "$SCHEMA_NAME" \
        -f "$SCHEMA_FILE"
    
    if [ $? -ne 0 ]; then
        echo "Error: Schema backup failed"
        exit 1
    fi
    echo "Schema backup successful: $SCHEMA_FILE"

    # Backup migration history
    supabase db dump \
        --db-url "postgresql://postgres:postgres@$PROD_URL:5432/postgres" \
        --schema "$SCHEMA_NAME" \
        --migration-table \
        -f "${SCHEMA_FILE}.migration"
    
    if [ $? -ne 0 ]; then
        echo "Error: Migration history backup failed"
        exit 1
    fi
    echo "Migration history backup successful: ${SCHEMA_FILE}.migration"
}

# Restore schema to local
restore_schema() {
    echo "Restoring schema $SCHEMA_NAME to local Supabase..."
    
    # Reset local schema
    supabase db reset \
        --db-url "postgresql://postgres:postgres@localhost:54321/postgres" \
        --schema "$SCHEMA_NAME"
    
    if [ $? -ne 0 ]; then
        echo "Error: Local schema reset failed"
        exit 1
    fi
    
    # Restore schema
    supabase db push \
        --db-url "postgresql://postgres:postgres@localhost:54321/postgres" \
        --schema "$SCHEMA_NAME" \
        -f "$SCHEMA_FILE"
    
    if [ $? -ne 0 ]; then
        echo "Error: Schema restore failed"
        exit 1
    fi
    
    # Restore migration history
    supabase db push \
        --db-url "postgresql://postgres:postgres@localhost:54321/postgres" \
        --schema "$SCHEMA_NAME" \
        -f "${SCHEMA_FILE}.migration"
    
    if [ $? -ne 0 ]; then
        echo "Error: Migration history restore failed"
        exit 1
    fi

    # Grant permissions
    psql "postgresql://postgres:postgres@localhost:54321/postgres" << EOF
GRANT USAGE ON SCHEMA $SCHEMA_NAME TO $DB_USER;
GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA $SCHEMA_NAME TO $DB_USER;
GRANT ALL PRIVILEGES ON ALL SEQUENCES IN SCHEMA $SCHEMA_NAME TO $DB_USER;
EOF
    
    if [ $? -ne 0 ]; then
        echo "Error: Permission grant failed"
        exit 1
    fi
    echo "Permissions granted to $DB_USER on schema $SCHEMA_NAME"
}

# Check local Supabase status
check_local_status() {
    echo "Checking local Supabase status..."
    supabase status
    
    if [ $? -ne 0 ]; then
        echo "Starting local Supabase..."
        supabase start
    fi
}

# Show usage instructions
show_usage() {
    echo "Usage: $0 <command> <project_name> <schema_name> <db_user> <prod_url> <prod_key> [local_url] [local_key]"
    echo "Commands:"
    echo "  local     - Switch to Local Supabase"
    echo "  prod      - Switch to Production Supabase"
    echo "  backup    - Backup schema from Production"
    echo "  restore   - Restore schema to Local"
    echo "  sync      - Full sync (backup -> restore -> switch to local)"
    exit 1
}

# Main script execution
if [ $# -lt 6 ]; then
    show_usage
fi

COMMAND=$1
PROJECT_NAME=$2
SCHEMA_NAME=$3
DB_USER=$4
PROD_URL=$5
PROD_KEY=$6
LOCAL_URL=${7:-"http://localhost:54321"}
LOCAL_KEY=${8:-"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJyb2xlIjoiYW5vbiIsImlhdCI6MTYyMjYxNDgyMiwiZXhwIjoxOTM4MTkwODIyfQ.ZDj4ZPXzyQy6LA7WL5RqWzF1NEg-QmP5ABHrGa_LBQI"}

get_schema_info "$PROJECT_NAME" "$SCHEMA_NAME" "$DB_USER" "$PROD_URL" "$PROD_KEY" "$LOCAL_URL" "$LOCAL_KEY"

case "$COMMAND" in
    "local"|"prod")
        update_client_file $COMMAND
        ;;
    "backup")
        check_supabase_cli
        backup_schema
        ;;
    "restore")
        check_supabase_cli
        check_local_status
        restore_schema
        ;;
    "sync")
        check_supabase_cli
        check_local_status
        backup_schema
        restore_schema
        update_client_file "local"
        ;;
    *)
        show_usage
        ;;
esac

